{
  "version": 3,
  "sources": ["../../.pnpm/simulationjs@1.0.0/node_modules/simulationjs/dist/simulation.js"],
  "sourcesContent": ["// global vars\nlet fps;\nlet currentMousePos;\nlet currentMouseEvent;\nconst validEvents = ['mousemove', 'click', 'hover', 'mouseover', 'mouseleave'];\n\nexport class Vector {\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @param {number} r\n   */\n  constructor(x, y, r = 0) {\n    this.x = x;\n    this.y = y;\n    this.mag = pythag(x, y);\n    this.startAngle = radToDeg(atan2(y, x));\n    this.startX = x;\n    this.startY = y;\n    this.rotation = r;\n  }\n  /**\n   * @param {number} deg\n   */\n  rotate(deg) {\n    this.rotation += deg;\n    this.#setRotation();\n  }\n  /**\n   * @param {number} deg\n   */\n  rotateTo(deg) {\n    this.rotation = deg;\n    this.#setRotation();\n  }\n  #setRotation() {\n    const deg = this.rotation * (Math.PI / 180);\n    this.x = this.startX * Math.cos(deg) - this.startY * Math.sin(deg);\n    this.y = this.startX * Math.sin(deg) + this.startY * Math.cos(deg);\n  }\n  /**\n   *\n   * @param {any} c - context\n   * @param {Point} pos\n   * @param {string} color - hex color, not Color object\n   * @param {number} s - vector scale\n   * @param {number} t - stroke width\n   */\n  draw(c, pos = new Point(0, 0), color = '#000000', s = 1, t = 1) {\n    c.beginPath();\n    c.strokeStyle = color;\n    c.lineWidth = t;\n    c.moveTo(pos.x, pos.y);\n    c.lineTo(pos.x + this.x * s, pos.y + this.y * s);\n    c.stroke();\n    c.closePath();\n  }\n  normalize() {\n    if (this.mag != 0) {\n      this.x /= this.mag;\n      this.startX /= this.mag;\n      this.y /= this.mag;\n      this.startY /= this.mag;\n      this.mag = 1;\n    }\n  }\n  /**\n   * @param {number} n\n   */\n  multiply(n) {\n    this.x *= n;\n    this.startX *= n;\n    this.y *= n;\n    this.startY *= n;\n    this.mag *= n;\n  }\n  /**\n   * @param {number} n\n   */\n  multiplyX(n) {\n    this.x *= n;\n    this.startX *= n;\n    this.#updateMag();\n  }\n  /**\n   * @param {number} n\n   */\n  multiplyY(n) {\n    this.y *= n;\n    this.startY *= n;\n    this.#updateMag();\n  }\n  /**\n   * @param {number} n\n   */\n  divide(n) {\n    this.x /= n;\n    this.startX /= n;\n    this.y /= n;\n    this.startY /= n;\n    this.mag /= n;\n  }\n  /**\n   * @param {number} value\n   */\n  appendMag(value) {\n    if (this.mag != 0) {\n      const newMag = this.mag + value;\n      this.normalize();\n      this.multiply(newMag);\n      this.mag = newMag;\n    }\n  }\n  /**\n   * @param {number} value\n   */\n  appendX(value) {\n    this.x += value;\n    this.startX += value;\n    this.#updateMag();\n  }\n  /**\n   * @param {number} value\n   */\n  appendY(value) {\n    this.y += value;\n    this.startY += value;\n    this.#updateMag();\n  }\n  /**\n   * @param {number} value\n   */\n  setX(value) {\n    this.x = value;\n    this.startX = value;\n    this.#updateMag();\n  }\n  /**\n   * @param {number} value\n   */\n  setY(value) {\n    this.y = value;\n    this.startY = value;\n    this.#updateMag();\n  }\n  #updateMag() {\n    this.mag = pythag(this.x, this.y);\n  }\n  /**\n   * @param {number} value\n   */\n  setMag(value) {\n    this.normalize();\n    this.multiply(value);\n    this.mag = value;\n  }\n  clone() {\n    return new Vector(this.x, this.y, this.rotation);\n  }\n  format() {\n    return `(${this.x}, ${this.y})`;\n  }\n}\n\nexport class SimulationElement {\n  /**\n   * @param {Point} pos\n   * @param {Color} color\n   */\n  constructor(pos, color = new Color(0, 0, 0)) {\n    this.pos = pos;\n    this.color = color;\n    this.sim = null;\n  }\n  setSimulationElement(el) {\n    this.sim = el;\n  }\n  /**\n   * @param {Color} color\n   * @param {Number} t - time in seconds\n   */\n  fill(color, t = 0) {\n    const currentColor = new Color(this.color.r, this.color.g, this.color.b);\n    const changeR = (color.r - this.color.r) / (t * fps);\n    const changeG = (color.g - this.color.g) / (t * fps);\n    const changeB = (color.b - this.color.b) / (t * fps);\n\n    const func = () => {\n      this.color = color;\n    };\n\n    return transitionValues(\n      func,\n      () => {\n        currentColor.r += changeR;\n        currentColor.g += changeG;\n        currentColor.b += changeB;\n        this.color.r = currentColor.r;\n        this.color.g = currentColor.g;\n        this.color.b = currentColor.b;\n      },\n      func,\n      t\n    );\n  }\n  /**\n   * @param {Point} p\n   * @param {Number} t - time in seconds\n   */\n  moveTo(p, t = 0) {\n    const changeX = (p.x - this.pos.x) / (t * fps);\n    const changeY = (p.y - this.pos.y) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.pos = p;\n      },\n      () => {\n        this.pos.x += changeX;\n        this.pos.y += changeY;\n      },\n      () => {\n        this.pos.x = p.x;\n        this.pos.y = p.y;\n      },\n      t\n    );\n  }\n  /**\n   * @param {Vector} p\n   * @param {Number} t - time in seconds\n   *\n   */\n  move(p, t = 0) {\n    const changeX = p.x / (t * fps);\n    const changeY = p.y / (t * fps);\n    const startPos = new Point(this.pos.x, this.pos.y);\n\n    return transitionValues(\n      () => {\n        this.pos.x += p.x;\n        this.pos.y += p.y;\n      },\n      () => {\n        this.pos.x += changeX;\n        this.pos.y += changeY;\n      },\n      () => {\n        this.pos.x = startPos.x + p.x;\n        this.pos.y = startPos.y + p.y;\n      },\n      t\n    );\n  }\n}\n\nexport class Color {\n  constructor(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n  #compToHex(c) {\n    const hex = Math.round(c).toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n  }\n  toHex() {\n    return (\n      '#' +\n      this.#compToHex(this.r) +\n      this.#compToHex(this.g) +\n      this.#compToHex(this.b)\n    );\n  }\n}\n\nexport class Point extends Vector {\n  /**\n   * @param {number} x\n   * @param {number} y\n   */\n  constructor(x, y) {\n    super(x, y);\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  /**\n   * @param {Point} p\n   */\n  add(p) {\n    const newPoint = this.clone();\n    newPoint.x += p.x;\n    newPoint.y += p.y;\n    return newPoint;\n  }\n  format() {\n    return super.format();\n  }\n}\n\nexport class SceneCollection extends SimulationElement {\n  constructor(n = '') {\n    super(new Point(0, 0), new Color(0, 0, 0));\n    this.name = n;\n    this.scene = [];\n    this.idObjs = {};\n  }\n  add(element, id = null) {\n    if (element instanceof SimulationElement) {\n      if (this.sim != null) {\n        element.setSimulationElement(this.sim);\n      }\n      if (id != null) {\n        this.idObjs[id] = element;\n      } else {\n        this.scene.push(element);\n      }\n    } else {\n      console.warn('Invalid Element. Must be an instance of SimElement');\n    }\n  }\n  /**\n   * @param {string} id\n   */\n  removeWithId(id) {\n    delete this.idObjs[id];\n  }\n  removeWithObject(element) {\n    for (const el of this.scene) {\n      if (el == element) {\n        this.scene.splice(this.scene.indexOf(el), 1);\n        return;\n      }\n    }\n    for (const key of Object.keys(this.idObjs)) {\n      if (this.idObjs[key] == element) {\n        delete this.idObjs[key];\n        return;\n      }\n    }\n  }\n  setSimulationElement(sim) {\n    this.sim = sim;\n    for (const element of this.scene) {\n      element.setSimulationElement(sim);\n    }\n  }\n  draw(c) {\n    for (const element of this.scene) {\n      element.draw(c);\n    }\n    for (const element of Object.values(this.idObjs)) {\n      element.draw(c);\n    }\n  }\n}\n\nexport class Line extends SimulationElement {\n  /**\n   * @param {Point} p1\n   * @param {Point} p2\n   * @param {Color} color\n   */\n  constructor(p1, p2, thickness, color, r = 0) {\n    super(p1, color);\n    this.start = p1;\n    this.end = p2;\n    this.rotation = r;\n    this.#setVector();\n    this.thickness = thickness;\n  }\n  clone() {\n    return new Line(\n      this.start,\n      this.end,\n      this.thickness,\n      this.color,\n      this.rotation\n    );\n  }\n  /**\n   * @param {Point} p\n   * @param {number} t\n   */\n  setStart(p, t = 0) {\n    const xChange = (p.x - this.start.x) / (t * fps);\n    const yChange = (p.y - this.start.y) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.start = p;\n      },\n      () => {\n        this.start.x += xChange;\n        this.start.y += yChange;\n      },\n      () => {\n        this.start = p;\n      },\n      t\n    );\n  }\n  /**\n   * @param {Point} p\n   * @param {number} t\n   */\n  setEnd(p, t = 0) {\n    const xChange = (p.x - this.end.x) / (t * fps);\n    const yChange = (p.y - this.end.y) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.end = p;\n        this.#setVector();\n      },\n      () => {\n        this.end.x += xChange;\n        this.end.y += yChange;\n        this.#setVector();\n      },\n      () => {\n        this.end = p;\n        this.#setVector();\n      },\n      t\n    );\n  }\n  #setVector() {\n    this.vec = new Vector(this.end.x - this.start.x, this.end.y - this.start.y);\n    this.vec.rotateTo(this.rotation);\n  }\n  /**\n   * @param {number} deg\n   * @param {number} t\n   */\n  rotate(deg, t = 0) {\n    const rotationChange = deg / (t * fps);\n    const start = this.rotation;\n\n    return transitionValues(\n      () => {\n        this.rotation += deg;\n        this.vec.rotate(deg);\n      },\n      () => {\n        this.rotation += rotationChange;\n        this.vec.rotate(rotationChange);\n      },\n      () => {\n        this.rotation = start + deg;\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} deg\n   * @param {number} t\n   */\n  rotateTo(deg, t = 0) {\n    const rotationChange = (deg - this.rotation) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.rotation = deg;\n        this.vec.rotateTo(deg);\n      },\n      () => {\n        this.rotation += rotationChange;\n        this.vec.rotateTo(this.rotation);\n      },\n      () => {\n        this.rotation = deg;\n        this.vec.rotateTo(deg);\n      },\n      t\n    );\n  }\n  /**\n   * @param {Point} p\n   * @param {number} t\n   */\n  moveTo(p, t = 0) {\n    return this.setStart(p, t);\n  }\n  /**\n   * @param {Vector} v\n   * @param {number} t\n   */\n  move(v, t = 0) {\n    return this.moveTo(this.start.add(v), t);\n  }\n  draw(c) {\n    this.vec.draw(\n      c,\n      new Point(this.start.x, this.start.y),\n      this.color.toHex(),\n      1,\n      this.thickness\n    );\n  }\n}\n\nexport class Circle extends SimulationElement {\n  /**\n   * @param {Point} pos\n   * @param {number} radius\n   * @param {Color} color\n   */\n  constructor(pos, radius, color) {\n    super(pos, color);\n    this.radius = radius;\n    this.hovering = false;\n    this.events = [];\n  }\n  clone() {\n    return new Circle(this.pos, this.radius, this.color);\n  }\n  draw(c) {\n    c.beginPath();\n    c.fillStyle = this.color.toHex();\n    c.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI * 2, false);\n    c.fill();\n    c.closePath();\n    this.#checkEvents();\n  }\n  /**\n   * @param {number} value\n   * @param {number} t\n   * @returns {Promise}\n   */\n  setRadius(value, t = 0) {\n    const radiusChange = (value - this.radius) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.radius = value;\n      },\n      () => {\n        this.radius += radiusChange;\n      },\n      () => {\n        this.radius = value;\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} value\n   * @param {number} t\n   * @returns {Promise}\n   */\n  scale(value, t = 0) {\n    const radiusChange = (this.radius * value - this.radius) / (t * fps);\n    const finalValue = this.radius * value;\n\n    return transitionValues(\n      () => {\n        this.radius = finalValue;\n      },\n      () => {\n        this.radius += radiusChange;\n      },\n      () => {\n        this.radius = finalValue;\n      },\n      t\n    );\n  }\n  /**\n   * @param {string} event\n   * @param {Function} callback\n   * @param {Function} callback2\n   */\n  #checkEvents() {\n    this.events.forEach(event => {\n      const name = event.name;\n      switch (name) {\n        case 'mouseover': {\n          if (\n            !this.hovering &&\n            currentMousePos &&\n            this.contains(currentMousePos)\n          ) {\n            this.hovering = true;\n            event.callback(currentMouseEvent);\n          }\n          break;\n        }\n        case 'mouseleave': {\n          if (\n            this.hovering &&\n            currentMousePos &&\n            !this.contains(currentMousePos)\n          ) {\n            this.hovering = false;\n            event.callback(currentMouseEvent);\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    });\n  }\n  on(event, callback1, callback2) {\n    if (!validEvents.includes(event)) {\n      console.warn(\n        `Invalid event: ${event}. Event must be one of ${validEvents.join(\n          ', '\n        )}`\n      );\n      return;\n    }\n\n    // specific events\n    if (event === 'mousemove') {\n      this.sim.addEventListener('mousemove', e => {\n        const p = new Point(e.offsetX, e.offsetY);\n        if (this.contains(p)) {\n          callback1(e);\n        }\n      });\n    } else if (event === 'hover') {\n      this.on('mouseover', callback1);\n      this.on('mouseleave', callback2);\n    } else if (event === 'click') {\n      this.sim.addEventListener('click', e => {\n        const p = new Point(e.clientX, e.clientY);\n        if (this.contains(p)) {\n          callback1(e);\n        }\n      });\n    } else {\n      const newEvent = new Event(event, callback1);\n      this.events.push(newEvent);\n    }\n  }\n  /**\n   * @param {Point} p\n   * @returns {boolean}\n   */\n  contains(p) {\n    return distance(p, this.pos) < this.radius;\n  }\n}\n\nexport class Polygon extends SimulationElement {\n  /***\n   * @param {Color} color\n   * @param {Point[]} points\n   */\n  constructor(pos, points, color, r = 0, offsetPoint = new Point(0, 0)) {\n    super(pos, color);\n    this.rawPoints = points;\n    this.offsetPoint = offsetPoint;\n    this.offsetX = this.offsetPoint.x;\n    this.offsetY = this.offsetPoint.y;\n    this.points = points.map(p => {\n      return new Point(p.x + this.offsetX, p.y + this.offsetY);\n    });\n    this.rotation = r;\n  }\n  /**\n   * @param {Point[]} points\n   */\n  setPoints(points) {\n    this.points = points.map(p => {\n      return new Point(p.x + this.offsetX, p.y + this.offsetY);\n    });\n  }\n  clone() {\n    return new Polygon(\n      this.pos,\n      this.rawPoints,\n      this.color,\n      this.rotation,\n      this.offsetPoint\n    );\n  }\n  /**\n   * @param {number} deg\n   */\n  rotate(deg) {\n    this.rotation += deg;\n    this.#setRotation();\n  }\n  /**\n   * @param {number} deg\n   */\n  rotateTo(deg) {\n    this.rotation = deg;\n    this.#setRotation();\n  }\n  #setRotation() {\n    this.points = this.points.map(p => {\n      p.rotateTo(this.rotation);\n      return p;\n    });\n  }\n  draw(c) {\n    c.beginPath();\n    c.fillStyle = this.color.toHex();\n    c.moveTo(this.points[0].x + this.pos.x, this.points[0].y + this.pos.y);\n    for (let i = 1; i < this.points.length; i++) {\n      c.lineTo(this.points[i].x + this.pos.x, this.points[i].y + this.pos.y);\n    }\n    c.fill();\n    c.closePath();\n  }\n}\n\nexport class Event {\n  constructor(name, callback) {\n    this.name = name;\n    this.callback = callback;\n  }\n}\n\nexport class Square extends SimulationElement {\n  /**\n   * @param {Point} pos\n   * @param {Number} width\n   * @param {Number} height\n   * @param {Color} color\n   * @param {Number} offsetX\n   * @param {Number} offsetY\n   * @param {Number} rotation - rotation in degrees\n   */\n  constructor(\n    pos,\n    width,\n    height,\n    color,\n    offsetPoint = new Point(0, 0),\n    rotation = 0\n  ) {\n    super(pos, color);\n    this.width = width;\n    this.height = height;\n    this.rotation = rotation;\n    this.showNodeVectors = false;\n    this.showCollisionVectors = false;\n    this.hovering = false;\n    this.events = [];\n    this.updateOffsetPosition(offsetPoint);\n  }\n  /**\n   * @param {Point} p - new position\n   */\n  updateOffsetPosition(p) {\n    this.offsetX = p.x;\n    this.offsetY = p.y;\n    this.topLeft = new Vector(\n      -this.width / 2 - this.offsetX,\n      -this.height / 2 - this.offsetY\n    );\n    this.topRight = new Vector(\n      this.width / 2 - this.offsetX,\n      -this.height / 2 - this.offsetY\n    );\n    this.bottomLeft = new Vector(\n      -this.width / 2 - this.offsetX,\n      this.height / 2 - this.offsetY\n    );\n    this.bottomRight = new Vector(\n      this.width / 2 - this.offsetX,\n      this.height / 2 - this.offsetY\n    );\n    this.#setRotation();\n  }\n  /**\n   * @param {boolean} show\n   */\n  setNodeVectors(show) {\n    this.showNodeVectors = show;\n  }\n  setCollisionVectors(show) {\n    this.showCollisionVectors = show;\n  }\n  #setRotation() {\n    this.topLeft.rotateTo(this.rotation);\n    this.topRight.rotateTo(this.rotation);\n    this.bottomLeft.rotateTo(this.rotation);\n    this.bottomRight.rotateTo(this.rotation);\n  }\n  /**\n   * @param {number} deg\n   * @param {number} t\n   */\n  rotate(deg, t = 0) {\n    const startRotation = this.rotation;\n    const rotationChange = deg / (t * fps);\n\n    const func = () => {\n      this.rotation = startRotation + deg;\n      this.#setRotation();\n    };\n\n    return transitionValues(\n      func,\n      () => {\n        this.rotation += rotationChange;\n        this.#setRotation();\n      },\n      func,\n      t\n    );\n  }\n  /**\n   * @param {number} deg\n   * @param {number} t\n   */\n  rotateTo(deg, t = 0) {\n    const rotationChange = (deg - this.rotation) / (t * fps);\n\n    const func = () => {\n      this.rotation = deg;\n      this.#setRotation();\n    };\n\n    return transitionValues(\n      func,\n      () => {\n        this.rotation += rotationChange;\n        this.#setRotation();\n      },\n      func,\n      t\n    );\n  }\n  draw(c) {\n    c.beginPath();\n    c.fillStyle = this.color.toHex();\n    c.moveTo(\n      this.pos.x + this.topLeft.x + this.offsetX,\n      this.pos.y + this.topLeft.y + this.offsetY\n    );\n    c.lineTo(\n      this.pos.x + this.topRight.x + this.offsetX,\n      this.pos.y + this.topRight.y + this.offsetY\n    );\n    c.lineTo(\n      this.pos.x + this.bottomRight.x + this.offsetX,\n      this.pos.y + this.bottomRight.y + this.offsetY\n    );\n    c.lineTo(\n      this.pos.x + this.bottomLeft.x + this.offsetX,\n      this.pos.y + this.bottomLeft.y + this.offsetY\n    );\n    c.fill();\n    c.closePath();\n\n    if (this.showNodeVectors) {\n      this.topLeft.draw(\n        c,\n        new Point(this.pos.x + this.offsetX, this.pos.y + this.offsetY)\n      );\n      this.topRight.draw(\n        c,\n        new Point(this.pos.x + this.offsetX, this.pos.y + this.offsetY)\n      );\n      this.bottomLeft.draw(\n        c,\n        new Point(this.pos.x + this.offsetX, this.pos.y + this.offsetY)\n      );\n      this.bottomRight.draw(\n        c,\n        new Point(this.pos.x + this.offsetX, this.pos.y + this.offsetY)\n      );\n    }\n\n    if (this.showCollisionVectors) {\n      const testVecs = [this.v1, this.v2, this.v3, this.v4, this.v5];\n      if (testVecs.some(el => el)) {\n        testVecs.forEach(vec =>\n          vec.draw(c, new Point(this.pos.x, this.pos.y), '#0000ff')\n        );\n      }\n    }\n\n    this.#checkEvents();\n  }\n  /**\n   * @param {number} value\n   * @param {number} t\n   * @returns {Promise}\n   */\n  scale(value, t = 0) {\n    const topRightMag = this.topRight.mag;\n    const topLeftMag = this.topLeft.mag;\n    const bottomRightMag = this.bottomRight.mag;\n    const bottomLeftMag = this.bottomLeft.mag;\n\n    const topRightChange = (topRightMag * value - topRightMag) / (t * fps);\n    const topLeftChange = (topLeftMag * value - topLeftMag) / (t * fps);\n    const bottomRightChange =\n      (bottomRightMag * value - bottomRightMag) / (t * fps);\n    const bottomLeftChange =\n      (bottomLeftMag * value - bottomLeftMag) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.topRight.multiply(value);\n        this.topLeft.multiply(value);\n        this.bottomRight.multiply(value);\n        this.bottomLeft.multiply(value);\n\n        this.#updateDimentions();\n      },\n      () => {\n        this.topRight.appendMag(topRightChange);\n        this.topLeft.appendMag(topLeftChange);\n        this.bottomRight.appendMag(bottomRightChange);\n        this.bottomLeft.appendMag(bottomLeftChange);\n      },\n      () => {\n        this.topRight.normalize();\n        this.topRight.multiply(topRightMag * value);\n\n        this.topLeft.normalize();\n        this.topLeft.multiply(topLeftMag * value);\n\n        this.bottomRight.normalize();\n        this.bottomRight.multiply(bottomRightMag * value);\n\n        this.bottomLeft.normalize();\n        this.bottomLeft.multiply(bottomLeftMag * value);\n\n        this.#updateDimentions();\n      },\n      t\n    );\n  }\n  #getInitialStartAndMag() {\n    const topRightClone = this.topRight.clone();\n    const topLeftClone = this.topLeft.clone();\n    const bottomLeftClone = this.bottomLeft.clone();\n    const bottomRightClone = this.bottomRight.clone();\n    return {\n      topRightClone,\n      topLeftClone,\n      bottomLeftClone,\n      bottomRightClone,\n    };\n  }\n  /**\n   * @param {string} component - x or y component of cloned Vector's magnitude\n   */\n  #getProcessedStartAndMag(component) {\n    const startAndMag = this.#getInitialStartAndMag();\n    const mags = Object.keys(startAndMag).reduce((prev, current, index) => {\n      let obj = {\n        ...prev,\n      };\n      if (component) {\n        obj[current.replace('Clone', 'Mag')] = startAndMag[current][component];\n      } else {\n        obj[current.replace('Clone', 'Mag')] = current.mag;\n      }\n      return obj;\n    }, {});\n    return {\n      ...startAndMag,\n      ...mags,\n    };\n  }\n  /**\n   * @param {value} value\n   * @param {value} t\n   * @returns {Promise}\n   */\n  scaleWidth(value, t = 0) {\n    let {\n      topRightClone,\n      topLeftClone,\n      bottomRightClone,\n      bottomLeftClone,\n      topRightMag,\n      topLeftMag,\n      bottomRightMag,\n      bottomLeftMag,\n    } = this.#getProcessedStartAndMag('x');\n    const topRightChange = (topRightMag * value - topRightMag) / (t * fps);\n    const topLeftChange = (topLeftMag * value - topLeftMag) / (t * fps);\n    const bottomRightChange =\n      (bottomRightMag * value - bottomRightMag) / (t * fps);\n    const bottomLeftChange =\n      (bottomLeftMag * value - bottomLeftMag) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.topRight.multiplyX(value);\n        this.topLeft.multiplyX(value);\n        this.bottomRight.multiplyX(value);\n        this.bottomLeft.multiplyX(value);\n\n        this.#updateDimentions();\n      },\n      () => {\n        this.topRight.appendX(topRightChange);\n        this.topLeft.appendX(topLeftChange);\n        this.bottomRight.appendX(bottomRightChange);\n        this.bottomLeft.appendX(bottomLeftChange);\n      },\n      () => {\n        topRightClone.setX(1);\n        topRightClone.multiplyX(topRightMag * value);\n        this.topRight = topRightClone.clone();\n\n        topLeftClone.setX(1);\n        topLeftClone.multiplyX(topLeftMag * value);\n        this.topLeft = topLeftClone.clone();\n\n        bottomRightClone.setX(1);\n        bottomRightClone.multiplyX(bottomRightMag * value);\n        this.bottomRight = bottomRightClone.clone();\n\n        bottomLeftClone.setX(1);\n        bottomLeftClone.multiplyX(bottomLeftMag * value);\n        this.bottomLeft = bottomLeftClone.clone();\n\n        this.#updateDimentions();\n      },\n      t\n    );\n  }\n  /**\n   *\n   * @param {number} value\n   * @param {number} t\n   * @returns {Promise}\n   */\n  scaleHeight(value, t = 0) {\n    let {\n      topRightClone,\n      topLeftClone,\n      bottomLeftClone,\n      bottomRightClone,\n      topRightMag,\n      topLeftMag,\n      bottomRightMag,\n      bottomLeftMag,\n    } = this.#getProcessedStartAndMag('y');\n    const topRightChange = (topRightMag * value - topRightMag) / (t * fps);\n    const topLeftChange = (topLeftMag * value - topLeftMag) / (t * fps);\n    const bottomRightChange =\n      (bottomRightMag * value - bottomRightMag) / (t * fps);\n    const bottomLeftChange =\n      (bottomLeftMag * value - bottomLeftMag) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.topRight.multiplyY(value);\n        this.topLeft.multiplyY(value);\n        this.bottomRight.multiplyY(value);\n        this.bottomLeft.multiplyY(value);\n\n        this.#updateDimentions();\n      },\n      () => {\n        this.topRight.appendY(topRightChange);\n        this.topLeft.appendY(topLeftChange);\n        this.bottomRight.appendY(bottomRightChange);\n        this.bottomLeft.appendY(bottomLeftChange);\n      },\n      () => {\n        topRightClone.setY(1);\n        topRightClone.multiplyY(topRightMag * value);\n        this.topRight = topRightClone.clone();\n\n        topLeftClone.setY(1);\n        topLeftClone.multiplyY(topLeftMag * value);\n        this.topLeft = topLeftClone.clone();\n\n        bottomRightClone.setY(1);\n        bottomRightClone.multiplyY(bottomRightMag * value);\n        this.bottomRight = bottomRightClone.clone();\n\n        bottomLeftClone.setY(1);\n        bottomLeftClone.multiplyY(bottomLeftMag * value);\n        this.bottomLeft = bottomLeftClone.clone();\n\n        this.#updateDimentions();\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} value\n   * @param {number} t\n   * @returns {Promise}\n   */\n  setWidth(value, t = 0) {\n    const scale = value / this.width;\n    return this.scaleWidth(scale, t);\n  }\n  /**\n   * @param {number} value\n   * @param {number} t\n   * @returns {Promise}\n   */\n  setHeight(value, t = 0) {\n    const scale = value / this.height;\n    return this.scaleHeight(scale, t);\n  }\n  /**\n   * @param {Point} p\n   * @returns {Promise}\n   */\n  contains(p) {\n    const topLeftVector = new Vector(this.topLeft.x, this.topLeft.y);\n    topLeftVector.rotateTo(-this.rotation);\n    this.v1 = topLeftVector;\n\n    const topRightVector = new Vector(this.topRight.x, this.topRight.y);\n    topRightVector.rotateTo(-this.rotation);\n    this.v2 = topRightVector;\n\n    const bottomLeftVector = new Vector(this.bottomLeft.x, this.bottomLeft.y);\n    bottomLeftVector.rotateTo(-this.rotation);\n    this.v3 = bottomLeftVector;\n\n    const bottomRightVector = new Vector(\n      this.bottomRight.x,\n      this.bottomRight.y\n    );\n    bottomRightVector.rotateTo(-this.rotation);\n    this.v4 = bottomRightVector;\n\n    const cursorVector = new Vector(\n      p.x - this.pos.x - this.offsetX,\n      p.y - this.pos.y - this.offsetY\n    );\n    cursorVector.rotateTo(-this.rotation);\n    this.v5 = cursorVector;\n\n    if (\n      cursorVector.x > bottomLeftVector.x &&\n      cursorVector.x < topRightVector.x &&\n      cursorVector.y > topLeftVector.y &&\n      cursorVector.y < bottomLeftVector.y\n    ) {\n      return true;\n    }\n    return false;\n  }\n  #updateDimentions() {\n    this.height = this.topRight.y + this.bottomRight.y;\n    this.width = this.topRight.x + this.topLeft.x;\n  }\n  #checkEvents() {\n    this.events.forEach(event => {\n      const name = event.name;\n      switch (name) {\n        case 'mouseover': {\n          if (\n            !this.hovering &&\n            currentMousePos &&\n            this.contains(currentMousePos)\n          ) {\n            this.hovering = true;\n            event.callback(currentMouseEvent);\n          }\n          break;\n        }\n        case 'mouseleave': {\n          if (\n            this.hovering &&\n            currentMousePos &&\n            !this.contains(currentMousePos)\n          ) {\n            this.hovering = false;\n            event.callback(currentMouseEvent);\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    });\n  }\n  /**\n   * @param {string} event\n   * @param {Function} callback\n   * @param {Function} callback2\n   */\n  on(event, callback1, callback2) {\n    if (!validEvents.includes(event)) {\n      console.warn(\n        `Invalid event: ${event}. Event must be one of ${validEvents.join(\n          ', '\n        )}`\n      );\n      return;\n    }\n\n    // specific events\n    if (event === 'mousemove') {\n      this.sim.addEventListener('mousemove', e => {\n        const p = new Point(e.clientX, e.clientY);\n        if (this.contains(p)) {\n          callback1(e);\n        }\n      });\n    } else if (event === 'click') {\n      this.sim.addEventListener('click', e => {\n        const p = new Point(e.clientX, e.clientY);\n        if (this.contains(p)) {\n          callback1(e);\n        }\n      });\n    } else if (event === 'hover') {\n      this.on('mouseover', callback1);\n      this.on('mouseleave', callback2);\n    } else {\n      const newEvent = new Event(event, callback1);\n      this.events.push(newEvent);\n    }\n  }\n  clone() {\n    return new Square(\n      this.pos,\n      this.width,\n      this.height,\n      this.color,\n      this.offsetPoint,\n      rotation\n    );\n  }\n}\n\nexport class Simulation {\n  constructor(id, frameRate = 60) {\n    fps = frameRate;\n    this.scene = [];\n    this.idObjs = {};\n    this.fitting = false;\n    this.bgColor = '#ffffff';\n\n    this.canvas = document.getElementById(id);\n    if (!this.canvas) {\n      console.warn(`Canvas with id \"${id}\" not found`);\n      return;\n    }\n    this.canvas.addEventListener('mousemove', e => {\n      currentMousePos = new Point(e.offsetX, e.offsetY);\n      currentMouseEvent = e;\n    });\n    window.addEventListener('resize', () => this.#resizeCanvas(this.canvas));\n    this.#resizeCanvas(this.canvas);\n\n    const ctx = this.canvas.getContext('2d');\n\n    this.#render(ctx);\n  }\n  #render(c) {\n    setTimeout(() => {\n      c.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      c.beginPath();\n      c.fillStyle = this.bgColor;\n      c.fillRect(0, 0, this.canvas.width, this.canvas.height);\n      c.closePath();\n\n      for (const element of this.scene) {\n        element.draw(c);\n      }\n      Object.values(this.idObjs).forEach(element => {\n        element.draw(c);\n      });\n      this.#render(c);\n    }, 1000 / fps);\n  }\n  add(element, id = null) {\n    if (element instanceof SimulationElement) {\n      element.setSimulationElement(this.canvas);\n      if (id !== null) {\n        this.idObjs[id] = element;\n      } else {\n        this.scene.push(element);\n      }\n    } else {\n      console.warn('Invalid Element. Must be an instance of SimElement');\n    }\n  }\n  /**\n   * @param {string} id\n   */\n  removeWithId(id) {\n    if (this.idObjs[id] !== undefined) {\n      delete this.idObjs[id];\n    }\n  }\n  removeWithObject(element) {\n    for (const el of this.scene) {\n      if (compare(el, element)) {\n        this.scene.splice(this.scene.indexOf(el), 1);\n        return;\n      }\n    }\n    for (const key of Object.keys(this.idObjs)) {\n      if (compare(this.idObjs[key], element)) {\n        delete this.idObjs[key];\n      }\n    }\n  }\n  /**\n   * @param {string} event\n   * @param {Function} callback\n   * @returns\n   */\n  on(event, callback) {\n    if (!this.canvas) return;\n    this.canvas.addEventListener(event, callback);\n  }\n  fitElement() {\n    if (!this.canvas) return;\n    this.fitting = true;\n    this.#resizeCanvas(this.canvas);\n  }\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @returns\n   */\n  setSize(x, y) {\n    if (!this.canvas) return;\n    this.canvas.width = x;\n    this.canvas.height = y;\n    this.fitting = false;\n  }\n  /**\n   * @param {Color} color\n   */\n  setBgColor(color) {\n    if (color instanceof Color) {\n      this.bgColor = color.toHex();\n    } else {\n      console.warn('Invalid color. Must be an instance of Color object');\n    }\n  }\n  #resizeCanvas(c) {\n    if (!this.canvas) return;\n    if (this.fitting) {\n      c.width = c.parentElement.clientWidth;\n      c.height = c.parentElement.clientHeight;\n    }\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n  }\n}\n\n/**\n * @param {number} num\n * @returns {number}\n */\nexport function abs(num) {\n  return Math.abs(num);\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function pythag(x, y) {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/***\n * @param {Point} p1\n * @param {Point} p2\n * @returns {number}\n */\nexport function distance(p1, p2) {\n  return pythag(p1.x - p2.x, p1.y - p2.y);\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function atan2(x, y) {\n  return Math.atan2(y, x);\n}\n\n/**\n * @param {number} deg\n * @returns {number}\n */\nexport function degToRad(deg) {\n  return (deg * Math.PI) / 180;\n}\n\n/**\n * @param {number} rad\n * @returns {number}\n */\nexport function radToDeg(rad) {\n  return (rad * 180) / Math.PI;\n}\n\n/**\n * @param {Function} callback1 - called when t is 0\n * @param {Function} callback2 - called every frame until the animation is finished\n * @param {Function} callback3 - called after animation is finished\n * @param {number} t - animation time (seconds)\n * @returns {Promise}\n */\nexport function transitionValues(callback1, callback2, callback3, t) {\n  return new Promise((resolve, reject) => {\n    if (t == 0) {\n      callback1();\n      resolve();\n    } else {\n      const times = t * fps;\n      let looped = 0;\n      const step = () => {\n        callback2();\n        if (looped < times) {\n          looped++;\n          window.requestAnimationFrame(step);\n        } else {\n          callback3();\n          resolve();\n        }\n      };\n      window.requestAnimationFrame(step);\n    }\n  });\n}\n\n/**\n *\n * @param {any} val1\n * @param {any} val2\n * @returns {boolean}\n */\nexport function compare(val1, val2) {\n  const nullUndefArr = [null, undefined];\n  if (nullUndefArr.includes(val1) || nullUndefArr.includes(val2)) {\n    if (val1 === val2) return true;\n    return false;\n  }\n  if (typeof val1 !== typeof val2) return false;\n\n  if (Array.isArray(val1)) {\n    for (let i = 0; i < val1.length; i++) {\n      if (!compare(val1[i], val2[i])) return false;\n    }\n    return true;\n  }\n\n  if (typeof val1 === 'object') {\n    const compareForKeys = (keys, obj1, obj2) => {\n      for (let i = 0; i < keys.length; i++) {\n        if (typeof obj1[keys[i]] !== typeof obj2[keys[i]]) {\n          return false;\n        }\n\n        if (typeof obj1[keys[i]] === 'object') {\n          return compare(obj1[keys[i]], obj2[keys[i]]);\n        }\n\n        if (obj1[keys[i]] !== obj2[keys[i]]) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    const obj1Keys = Object.keys(val1);\n    const obj2Keys = Object.keys(val2);\n\n    const key1Result = compareForKeys(obj1Keys, val1, val2);\n    const key2Result = compareForKeys(obj2Keys, val1, val2);\n\n    if (key1Result && key2Result) return true;\n    return false;\n  }\n\n  return val1 === val2;\n}\n\nexport default {\n  Vector,\n  SimulationElement,\n  Color,\n  Point,\n  SceneCollection,\n  Line,\n  Circle,\n  Polygon,\n  Square,\n  Simulation,\n  abs,\n  pythag,\n  distance,\n  atan2,\n  degToRad,\n  radToDeg,\n  transitionValues,\n  compare,\n};\n"],
  "mappings": "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",
  "names": ["_setRotation", "setRotation_fn", "_checkEvents", "checkEvents_fn", "rotation"]
}
